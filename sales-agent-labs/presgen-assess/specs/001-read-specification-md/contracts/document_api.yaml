openapi: 3.0.3
info:
  title: Document Reading API
  description: API for reading specification and documentation files
  version: 1.0.0
  contact:
    name: PresGen-Assess Team

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.presgen-assess.com
    description: Production server

paths:
  /documents/specification:
    get:
      summary: Read the main specification document
      description: Retrieve the content of the specification.md document
      operationId: readSpecification
      tags:
        - documents
      parameters:
        - name: format
          in: query
          description: Response format preference
          required: false
          schema:
            type: string
            enum: [content, download, metadata]
            default: content
      responses:
        '200':
          description: Specification document retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
            text/markdown:
              schema:
                type: string
                example: "# PresGen-Assess Technical Specification\n\n## System Overview..."
        '404':
          description: Specification document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied to specification document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: Document too large to serve
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Document corrupted or invalid encoding
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{document_name}:
    get:
      summary: Read a specific document by name
      description: Retrieve the content of any available document
      operationId: readDocument
      tags:
        - documents
      parameters:
        - name: document_name
          in: path
          description: Name of the document to retrieve
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+\.md$'
            example: specification.md
        - name: format
          in: query
          description: Response format preference
          required: false
          schema:
            type: string
            enum: [content, download, metadata]
            default: content
      responses:
        '200':
          description: Document retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
            text/markdown:
              schema:
                type: string
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid document name format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Access denied to document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{document_name}/metadata:
    get:
      summary: Get document metadata
      description: Retrieve metadata information about a document without its content
      operationId: getDocumentMetadata
      tags:
        - documents
      parameters:
        - name: document_name
          in: path
          description: Name of the document
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+\.md$'
      responses:
        '200':
          description: Document metadata retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentMetadata'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents:
    get:
      summary: List available documents
      description: Retrieve a list of all available documents for reading
      operationId: listDocuments
      tags:
        - documents
      responses:
        '200':
          description: Document list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'

components:
  schemas:
    DocumentResponse:
      type: object
      required:
        - status
        - timestamp
        - content
        - metadata
      properties:
        status:
          type: string
          enum: [success]
          example: success
        timestamp:
          type: string
          format: date-time
          example: "2025-09-22T10:30:00Z"
        content:
          type: string
          description: The full content of the document
          example: "# PresGen-Assess Technical Specification\n\n## System Overview..."
        metadata:
          $ref: '#/components/schemas/DocumentMetadata'

    DocumentMetadata:
      type: object
      required:
        - name
        - type
        - size_bytes
      properties:
        name:
          type: string
          example: specification.md
        type:
          type: string
          enum: [specification, architecture, implementation_plan]
          example: specification
        size_bytes:
          type: integer
          format: int64
          example: 51200
          description: File size in bytes
        last_modified:
          type: string
          format: date-time
          example: "2025-09-22T09:15:00Z"
        checksum:
          type: string
          example: "a1b2c3d4e5f6"
          description: File content checksum for integrity verification

    DocumentList:
      type: object
      required:
        - documents
        - count
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentMetadata'
        count:
          type: integer
          example: 3
          description: Total number of available documents

    ErrorResponse:
      type: object
      required:
        - status
        - timestamp
        - error
      properties:
        status:
          type: string
          enum: [not_found, access_denied, too_large, corrupted, server_error, invalid_request]
          example: not_found
        timestamp:
          type: string
          format: date-time
          example: "2025-09-22T10:30:00Z"
        error:
          type: object
          required:
            - message
            - code
          properties:
            message:
              type: string
              example: "The requested specification document was not found"
            code:
              type: string
              example: "DOCUMENT_NOT_FOUND"
            suggestions:
              type: array
              items:
                type: string
              example: ["Check if the document exists", "Contact support"]

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Optional JWT token for authenticated access

security:
  - BearerAuth: []
  - {} # Allow unauthenticated access for public documents

tags:
  - name: documents
    description: Document reading and metadata operations